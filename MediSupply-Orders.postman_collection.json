{
	"info": {
		"_postman_id": "c5deab1c-b4e7-4bec-98f7-dbf9c5023e15",
		"name": "MediSupply Orders API - Con Datos Aleatorios",
		"description": "Colección para validar el servicio de pedidos MediSupply con datos aleatorios generados automáticamente",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2750860",
		"_collection_link": "https://timecontrol.postman.co/workspace/TCT~e4bf613c-84ca-4624-ad9c-4c8c0259e211/collection/2750860-c5deab1c-b4e7-4bec-98f7-dbf9c5023e15?action=share&source=collection_link&creator=2750860"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response is pong', function () {",
							"    const responseText = pm.response.text().trim();",
							"    pm.expect(responseText).to.eql('\"pong\"');",
							"});",
							"console.log('Health check validado correctamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_local_pedidos}}/orders/ping",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Token Admin - Exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar respuesta exitosa de autenticación",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has access_token\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('access_token');",
							"    pm.expect(responseJson.access_token).to.be.a('string');",
							"    pm.expect(responseJson.access_token).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response has token_type\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('token_type');",
							"    pm.expect(responseJson.token_type).to.eql('Bearer');",
							"});",
							"",
							"pm.test(\"Response has expires_in\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('expires_in');",
							"    pm.expect(responseJson.expires_in).to.be.a('number');",
							"    pm.expect(responseJson.expires_in).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Response has refresh_token\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('refresh_token');",
							"    pm.expect(responseJson.refresh_token).to.be.a('string');",
							"    pm.expect(responseJson.refresh_token).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"// Guardar tokens para uso posterior",
							"const responseJson = pm.response.json();",
							"if (responseJson && responseJson.access_token) {",
							"    pm.globals.set('auth_token', responseJson.access_token);",
							"    console.log('Token de autenticación guardado');",
							"}",
							"",
							"// Guardar refresh_token para logout",
							"if (responseJson && responseJson.refresh_token) {",
							"    pm.globals.set('refresh_token', responseJson.refresh_token);",
							"    console.log('Refresh token guardado para logout');",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user\": \"medisupply05@gmail.com\",\n    \"password\": \"Admin123456\"\n}"
				},
				"url": {
					"raw": "{{url_local_pedidos}}/auth/token",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"auth",
						"token"
					]
				},
				"description": "Autentica un usuario admin usando las credenciales creadas anteriormente"
			},
			"response": []
		},
		{
			"name": "Obtener Pedidos por Cliente - Datos Válidos",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const clientId = Math.floor(Math.random() * 100) + 1;",
							"pm.environment.set(\"client_id_valido\", \"f1c2ce13-6623-4f42-a70b-9caadb7b8cbf\");",
							"console.log('Cliente ID generado:', clientId);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"pm.test('Data is an array', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"});",
							"console.log('Pedidos por cliente obtenidos correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders?client_id={{client_id_valido}}",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{client_id_valido}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Pedidos por Vendedor - Datos Válidos",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const vendorId = Math.floor(Math.random() * 50) + 1;",
							"pm.environment.set(\"vendor_id_valido\", \"df3bdc3f-7783-4c1e-981a-8060b114dfb2\");",
							"console.log('Vendedor ID generado:', vendorId);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"pm.test('Data is an array', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"});",
							"console.log('Pedidos por vendedor obtenidos correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders?vendor_id={{vendor_id_valido}}",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "vendor_id",
							"value": "{{vendor_id_valido}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Pedidos - Sin Parámetros (Error)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response).to.have.property('details');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"pm.test('Error message is correct', function () {",
							"    const response = pm.response.json();",
							"        pm.expect(response.details).to.include('Debe proporcionar client_id o vendor_id');",
							"});",
							"console.log('Error de parámetros faltantes validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Pedidos - Client ID Inválido",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const invalidIds = ['0', '-1', 'abc', 'null', 'undefined'];",
							"const invalidId = invalidIds[Math.floor(Math.random() * invalidIds.length)];",
							"pm.environment.set(\"client_id_invalido\", \"invalid-uuid-format\");",
							"console.log('Client ID inválido generado:', invalidId);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response).to.have.property('details');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"pm.test('Error message contains UUID validation', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('client_id debe ser un UUID válido');",
							"});",
							"console.log('Error de client ID inválido validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders?client_id={{client_id_invalido}}",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{client_id_invalido}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Pedidos - Vendor ID Inválido",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const invalidIds = ['0', '-1', 'xyz', 'null', 'undefined'];",
							"const invalidId = invalidIds[Math.floor(Math.random() * invalidIds.length)];",
							"pm.environment.set(\"vendor_id_invalido\", \"not-a-uuid\");",
							"console.log('Vendor ID inválido generado:', invalidId);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response).to.have.property('details');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"pm.test('Error message contains UUID validation', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('vendor_id debe ser un UUID válido');",
							"});",
							"console.log('Error de vendor ID inválido validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders?vendor_id={{vendor_id_invalido}}",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "vendor_id",
							"value": "{{vendor_id_invalido}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Pedidos - Cliente Sin Pedidos",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const clientIdSinPedidos = Math.floor(Math.random() * 1000) + 10000;",
							"pm.environment.set(\"client_id_sin_pedidos\", \"550e8400-e29b-41d4-a716-446655440000\");",
							"console.log('Cliente ID sin pedidos generado:', clientIdSinPedidos);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"pm.test('Message indicates no orders', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.message).to.include('No tienes entregas programadas en este momento');",
							"});",
							"pm.test('Data is empty array', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"    pm.expect(response.data.length).to.eql(0);",
							"});",
							"console.log('Cliente sin pedidos validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders?client_id={{client_id_sin_pedidos}}",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{client_id_sin_pedidos}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Pedidos - Vendedor Sin Pedidos",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const vendorIdSinPedidos = Math.floor(Math.random() * 1000) + 10000;",
							"pm.environment.set(\"vendor_id_sin_pedidos\", \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\");",
							"console.log('Vendedor ID sin pedidos generado:', vendorIdSinPedidos);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"pm.test('Message indicates no orders', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.message).to.include('No tienes entregas programadas en este momento');",
							"});",
							"pm.test('Data is empty array', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"    pm.expect(response.data.length).to.eql(0);",
							"});",
							"console.log('Vendedor sin pedidos validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders?vendor_id={{vendor_id_sin_pedidos}}",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "vendor_id",
							"value": "{{vendor_id_sin_pedidos}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Pedidos - Ambos Parámetros",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const clientId = Math.floor(Math.random() * 100) + 1;",
							"const vendorId = Math.floor(Math.random() * 50) + 1;",
							"pm.environment.set(\"client_id_ambos\", \"f1c2ce13-6623-4f42-a70b-9caadb7b8cbf\");",
							"pm.environment.set(\"vendor_id_ambos\", \"df3bdc3f-7783-4c1e-981a-8060b114dfb2\");",
							"console.log('IDs generados - Cliente:', clientId, 'Vendedor:', vendorId);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"pm.test('Data is an array', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"});",
							"console.log('Consulta con ambos parámetros validada correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders?client_id={{client_id_ambos}}&vendor_id={{vendor_id_ambos}}",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{client_id_ambos}}"
						},
						{
							"key": "vendor_id",
							"value": "{{vendor_id_ambos}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar Todos los Pedidos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"pm.test('Deletion message is correct', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response.message).to.be.a('string');",
							"    pm.expect(response.message).to.include('eliminados exitosamente');",
							"});",
							"console.log('Todos los pedidos eliminados correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders/delete-all",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders",
						"delete-all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verificar Estado Vacío Después de Eliminar",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log('Verificando que no hay pedidos después de eliminar todos');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"pm.test('Message indicates no orders', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.message).to.include('No tienes entregas programadas en este momento');",
							"});",
							"pm.test('Data is empty array', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"    pm.expect(response.data.length).to.eql(0);",
							"});",
							"console.log('Estado vacío después de eliminar todos validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders?client_id=f1c2ce13-6623-4f42-a70b-9caadb7b8cbf",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "client_id",
							"value": "f1c2ce13-6623-4f42-a70b-9caadb7b8cbf"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Validación de Estructura de Pedidos",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const clientId = Math.floor(Math.random() * 10) + 1;",
							"pm.environment.set(\"client_id_estructura\", \"f1c2ce13-6623-4f42-a70b-9caadb7b8cbf\");",
							"console.log('Validando estructura con cliente ID:', clientId);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"pm.test('Data is an array', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"});",
							"pm.test('Orders have required fields (if any exist)', function () {",
							"    const response = pm.response.json();",
							"    if (response.data && response.data.length > 0) {",
							"        const order = response.data[0];",
							"        pm.expect(order).to.have.property('id');",
							"        pm.expect(order).to.have.property('order_number');",
							"        pm.expect(order).to.have.property('client_id');",
							"        pm.expect(order).to.have.property('vendor_id');",
							"        pm.expect(order).to.have.property('status');",
							"    } else {",
							"        pm.expect(response.data).to.be.an('array');",
							"        pm.expect(response.data.length).to.eql(0);",
							"    }",
							"});",
							"pm.test('Order number format is correct (if any exist)', function () {",
							"    const response = pm.response.json();",
							"    if (response.data && response.data.length > 0) {",
							"        const order = response.data[0];",
							"        pm.expect(order.order_number).to.match(/^PED-\\d{8}-\\d{5}$/);",
							"    }",
							"});",
							"console.log('Estructura de pedidos validada correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders?client_id={{client_id_estructura}}",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{client_id_estructura}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Validación de Items de Pedidos",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const clientId = Math.floor(Math.random() * 10) + 1;",
							"pm.environment.set(\"client_id_items\", \"f1c2ce13-6623-4f42-a70b-9caadb7b8cbf\");",
							"console.log('Validando items con cliente ID:', clientId);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"pm.test('Items have required fields (if any exist)', function () {",
							"    const response = pm.response.json();",
							"    if (response.data && response.data.length > 0) {",
							"        const order = response.data[0];",
							"        if (order.items && order.items.length > 0) {",
							"            const item = order.items[0];",
							"            pm.expect(item).to.have.property('id');",
							"            pm.expect(item).to.have.property('product_id');",
							"            pm.expect(item).to.have.property('quantity');",
							"            pm.expect(item).to.have.property('order_id');",
							"        }",
							"    }",
							"});",
							"        }",
							"    }",
							"});",
							"console.log('Estructura de items validada correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_pedidos}}/orders?client_id={{client_id_items}}",
					"host": [
						"{{url_local_pedidos}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{client_id_items}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "url_local_pedidos",
			"value": "http://localhost:8085",
			"type": "string"
		}
	]
}